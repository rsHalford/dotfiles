#+title: Configure everything with Org Babel

* Startup

Decrease initial startup time by reducing garbage collection frequency.

#+begin_src emacs-lisp :tangle yes

  ;; The default is 800 kilobytes. Measures in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

#+end_src

Time emacs startup and output to the modeline.

#+begin_src emacs-lisp :tangle yes

  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collection. ***"
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

* System Settings
** XDG File Locations

Define the filepaths for config, data and cache according to the [[https://wiki.archlinux.org/title/XDG_Base_Directory][XDG Base Directory]] specification.

#+begin_src emacs-lisp :tangle yes

  (setq-default user-emacs-config-directory
                (concat (getenv "HOME") "/.config/emacs"))
  (setq-default user-emacs-data-directory
                (concat (getenv "HOME") "/.local/share/emacs"))
  (setq-default user-emacs-cache-directory
                (concat (getenv "HOME") "/.cache/emacs"))

#+end_src

** UTF-8

Set the default encoding to UTF-8.

#+begin_src emacs-lisp :tangle yes

  (set-default-coding-systems 'utf-8)

#+end_src

** Saving

Auto-update buffers if other actions/programs have changed the file.

#+begin_src emacs-lisp :tangle yes

  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)

#+end_src

Save place of previous edit when editing a file.

#+begin_src emacs-lisp :tangle yes

  (save-place-mode 1)

#+end_src

Disable autosave on NixOS to prevent attempts to write to ~/nix/store~.

#+begin_src emacs-lisp :tangle yes

  (setq auto-save-default nil)

#+end_src

* Package Management

Use package sources from ELPA, MELPA and Org Mode repositories. With ~use-package~ for configuring packages.

#+begin_src emacs-lisp :tangle yes

  ;; Initialise package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Keybindings

Neo/Vi/m will always be my first love/s...

** ESC

Escape escapes all, like ~C-g~.

#+begin_src emacs-lisp :tangle yes

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Undo-Tree

Vim-like undo history, using ~u~ and ~C-r~ keybindings, etc. Also making sure not to litter.

TODO: Change to $XDG_CONFIG_HOME file path for undo-tree, rather than absolute.

#+begin_src emacs-lisp :tangle yes

  (use-package undo-tree
    :init
    (global-undo-tree-mode)
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-history-directory-alist '(("." . "~/.config/emacs/undo-tree"))))

#+end_src

** Evil Mode

Setup evil-mode with /sensible/ defaults and block cursor *always*.

#+begin_src emacs-lisp :tangle yes

  (defun rsh/evil-hook ()
    (dolist (mode '(custom-mode
                  eshell-mode
                  term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    (setq evil-insert-state-cursor '(box "#ebdbb2")
        evil-normal-state-cursor '(box "#ebdbb2")
        evil-visual-state-cursor '(box "#ebdbb2")
        evil-motion-state-cursor '(box "#ebdbb2")
        evil-replace-state-cursor '(box "#ebdbb2")
        evil-operator-state-cursor '(box "#ebdbb2")
        evil-default-state 'normal)
    :config
    (add-hook 'evil-mode-hook 'rsh/evil-hook)
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    ;; Start in normal mode
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    ;; :init
    ;; (setq evil-collection-company-use-tng nil)
    ;; :custom
    ;; (evil-collection-outline-bind-tab-p nil)
    :config
    (setq evil-collection-mode-list
        (remove 'lispy evil-collection-mode-list))
    (evil-collection-init))

#+end_src

** Universal-Argument

Rebind ~C-u~ to ~C-M-u~ as Evil has rules all.

#+begin_src emacs-lisp :tangle yes

  (global-set-key (kbd "C-M-u") 'universal-argument) ;; Evil has taken 

#+end_src

** General

Replicate the leader key function in Emacs. An example usage is the ~SPC-t~ prefix for toggling modes, like =whitespace-mode=.

#+begin_src emacs-lisp :tangle yes

  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer rsh/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-create-definer rsh/ctrl-c-keys
      :prefix "C-c"))

  ;; Toggles
  (rsh/leader-key-def
    "t" '(:ignore t :which-key "toggles")
    "tw" 'whitespace-mode)

#+end_src

** Which-Key

Show the available keybings for the prefix keys entered. Changing the idle-delay to determine how quickly the prompt os available options shows up.

#+begin_src emacs-lisp :tangle yes

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

* UI
** Base Layout

Change the base GUI modes to clean-up the UI and improve contrast.

#+begin_src emacs-lisp :tangle yes

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (window-divider-mode t)

#+end_src

Prevent GUI dialogs from popping up.

#+begin_src emacs-lisp :tangle yes

  (setq use-dialog-box nil)

#+end_src

Improved cursor scrolling, with relative line numbers and a column boundary indicator in specific buffer modes.

#+begin_src emacs-lisp :tangle yes

  (setq scroll-margin 8) ;; Start scrolling 8 lines from the top/bottom
  (setq scroll-step 1)

  (setq display-line-numbers-type 'relative) ;; Relative position line numbers

  (column-number-mode t)
  (setq column-number-indicator-zero-based nil) ;; Column numbers work the same as lines
  (setq-default fill-column 80) ;; Column boundary position

  ;; Enable
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode t)))
    (add-hook mode (lambda () (display-fill-column-indicator-mode t))))

  ;; Disable
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0)))
    (add-hook mode (lambda () (display-fill-column-indicator-mode 0))))

#+end_src

** Disable Startup Screen

#+begin_src emacs-lisp :tangle yes

  (setq inhibit-startup-message t)

#+end_src

** Fonts

JetBrains Mono, Lexend and Gelasio is all I need. This function sets the fonts for each new client created.

#+begin_src emacs-lisp :tangle yes

  (defun rsh/setup-font-faces ()
    (set-face-attribute 'default nil
                        :font "JetBrainsMono Nerd Font"
                        :weight 'light
                        :height 110)
    (set-face-attribute 'fixed-pitch nil
                        :font "JetBrainsMono Nerd Font"
                        :weight 'light
                        :height 110)
    (set-face-attribute 'variable-pitch nil
                        :font "Gelasio"
                        :weight 'medium
                        :height 125)

    (with-eval-after-load 'org
      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1)))
        (set-face-attribute (car face) nil :font "Lexend" :weight 'medium :height (cdr face)))

      (set-face-attribute 'org-document-title nil :font "Gelasio" :weight 'bold :height 1.3)
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
      (set-face-attribute 'org-date nil  :inherit 'fixed-pitch)
      (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-column nil :background nil)
      (set-face-attribute 'org-column-title nil :background nil)))

  (add-hook 'after-init-hook 'rsh/setup-font-faces)
  (add-hook 'server-after-make-frame-hook 'rsh/setup-font-faces)

#+end_src

** Theme

Doom's themes integrate well with other packages, such as solaire-mode, to increase contrast between windows.

#+begin_src emacs-lisp :tangle yes

  (use-package doom-themes
    :hook
    (server-after-make-frame . (lambda ()
                                 (load-theme 'doom-gruvbox t)))
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-gruvbox t))

  (use-package solaire-mode
    :config
    (add-to-list 'solaire-mode-themes-to-face-swap "^doom-")
    (solaire-global-mode +1))

#+end_src

Toggle between themes.

#+begin_src emacs-lisp :tangle yes

  (rsh/leader-key-def
    "tu" '(consult-theme :which-key "choose theme"))

#+end_src

** Modeline

Improve the modeline look, with a nicer layout, theme integration and greater icon support.

#+begin_src emacs-lisp :tangle yes

  (use-package doom-modeline
    :hook (after-init . doom-modeline-init)
    :custom
    (doom-modeline-height 15)
    (doom-modeline-buffer-file-name-style 'truncate-except-project))

#+end_src

** Icons

NOTE: On first time install =all-the-icons= should be installed as a via nixpkgs (~pkgs.emacs-all-the-icons-fonts~), but if that does not populate icons correctly, enter the command ~M-x all-the-icons-install-fonts~ within emacs.

#+begin_src emacs-lisp :tangle yes

  (use-package all-the-icons)

#+end_src

* Menus

Started off with Ivy and Counsel, but I am currently trying out vertico for a simpler menu system, where I can learn and use all of the funcitonality that I need.

** Ivy

Currently not tangled within init.el.

#+begin_src emacs-lisp :tangle no

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
    ;; :after counsel

#+end_src

** Counsel

Currently not tangled within init.el.

#+begin_src emacs-lisp :tangle no

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

#+end_src

** Vertico

#+begin_src emacs-lisp :tangle yes

  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

#+end_src

** Minibuffer History

#+begin_src emacs-lisp :tangle yes

  (use-package savehist
    :config
    (setq history-length 25)
    (savehist-mode 1))

#+end_src

** Region Completion

#+begin_src emacs-lisp :tangle yes

  (use-package corfu
    :bind (:map corfu-map
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous)
                ("C-f" . corfu-insert))
    :custom
    (corfu-cycle t)
    :config
    (corfu-global-mode))

#+end_src

** Improved Completion

#+begin_src emacs-lisp :tangle yes

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

** Completion Commands

TODO: create function to determine the project root, for consult region completion.

#+begin_src emacs-lisp :tangle yes

  (use-package consult
    :bind (("C-s" . consult-line)
           ("C-M-l" . consult-imenu)
           ("C-M-j" . persp-switch-to-buffer*)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    ;; (consult-project-root-function #'rsh/get-project-root)
    :config
    (consult-preview-mode))

#+end_src

** Completion Annotations

#+begin_src emacs-lisp :tangle yes

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src

** Completion Actions

#+begin_src emacs-lisp :tangle yes

  (use-package embark
    :bind (("C-S-a" . embark-act)
           :map minibuffer-local-map
           ("C-d" . embark-act))
    :config
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

#+end_src

* File Management

#+begin_src emacs-lisp :tangle yes

  (use-package dired
    :ensure nil
    :defer 1
    :commands (dired dired-jump)
    :config
    (setq dired-listing-switches "-lagh --group-directories-first"
          dired-omit-files "^\\.[^.].*"
          dired-omit-verbose nil
          dired-hide-details-hide-symlink-targets nil)
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "H" 'dired-omit-mode
      "l" 'dired-single-buffer))

    (use-package dired-single
      :defer t)

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

* Terminal

For a more natural way of using the terminal within Emacs: vterm. With better colouring and more intelligent /togglelingablelalility/.

#+begin_src emacs-lisp :tangle yes

  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000))

  (use-package vterm-toggle
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '((lambda (bufname _)
                     (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   (reusable-frames . visible)
                   (window-height . 0.3))))

  (rsh/leader-key-def
    "tt" 'vterm-toggle)

#+end_src

* Notifications

Integrate emacs notifications with system libnotify.

#+begin_src emacs-lisp :tangle yes

  (use-package alert
    :commands alert
    :config
    (setq alert-default-style 'libnotify))

#+end_src

* Password Management

I combine pass, the standard unix password manager, with emacs' auth-sources package and pass extension.

#+begin_src emacs-lisp :tangle yes

  (use-package password-store
    :config
    (auth-source-pass-enable)
    (setq auth-sources '(password-store)
          auth-source-debug t))

  (rsh/leader-key-def
    "ap" '(:ignore t :which-key "pass")
    "apy" 'password-store-copy
    "api" 'password-store-insert
    "apg" 'password-store-generate)

#+end_src

* Remote

Default TRAMP to use SSH protocol.

#+begin_src emacs-lisp :tangle yes

  (setq tramp-default-method "ssh")

#+end_src

* Git

Magit is life.

#+begin_src emacs-lisp :tangle yes

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (rsh/leader-key-def
    "g" '(:ignore t :which-key "git")
    "gs" 'magit-status
    "gd" 'magit-diff-unstaged
    "gc" 'magit-branch-or-checkout
    "gl" '(:ignore t :which-key "log")
    "glb" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb" 'magit-branch
    "gp" '(:ignore t :which-key "push")
    "gps" 'magit-push-current
    "gpt" 'magit-push-tag
    "gP" 'magit-pull-branch
    "gf" 'magit-fetch
    "gF" 'magit-fetch-all
    "gm" 'magit-merge
    "gr" 'magit-rebase
    "gt" 'ivy-magit-todos)

#+end_src

List all =TODO= (and similar tag) comments within the project in magit's git status buffer, to help track and complete tasks.

#+begin_src emacs-lisp :tangle yes

  (use-package magit-todos
    :init (magit-todos-mode))

#+end_src

diff-hl provides a colour indicator in the left fringe, quickly showing added/changed/removed lines of code. 

#+begin_src emacs-lisp :tangle yes

  (setq-default left-fringe-width 3)
  (setq-default right-fringe-width 0)

  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))

#+end_src

* Language Server Protocol

Setup =lsp-mode= with leader key binds for useful actions.

#+begin_src emacs-lisp :tangle yes

  (use-package lsp-mode
    :commands lsp
    ;;:hook (() . lsp)
    :init
    :config
    (lsp-headerline-breadcrumb-enable nil))

  (rsh/leader-key-def
    "l"  '(:ignore t :which-key "lsp")
    "ld" 'xref-find-definitions
    "lr" 'xref-find-references
    "lj" 'lsp-ui-find-next-reference
    "lk" 'lsp-ui-find-prev-reference
    "ls" 'consult-imenu
    "le" 'lsp-ui-flycheck-list
    "li" 'lsp-ui-sideline-mode
    "la" 'lsp-execute-code-action)

#+end_src

** Lsp-UI

Change the look, position and type of symbol information and code-actions, etc. available via the lsp-modes.

#+begin_src emacs-lisp :tangle yes

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover nil)
    (setq lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))

#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp :tangle yes

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Lsp-Treemacs

#+begin_src emacs-lisp :tangle yes

  (use-package lsp-treemacs
    :after lsp)

#+end_src

** Languages
*** Emacs-Lisp

#+begin_src emacs-lisp :tangle yes

  ;; Helpful
  (use-package helpful
    :custom
    (describe-function-function #'helpful-callable)
    (describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))

  (rsh/leader-key-def
    "e" '(:ignore t :which-key "eval")
    "eb" '(eval-buffer :which-key "eval buffer"))

  (rsh/leader-key-def
    :keymaps '(visual)
    "er" '(eval-region :which-key "eval region"))

#+end_src

*** Nix

Nix lsp provided by =rnix-lsp=.

#+begin_src emacs-lisp :tangle yes

  (use-package nix-mode
    :mode "\\.nix\\'"
    :hook (nix-mode . lsp-deferred))

#+end_src

* Org Mode

** Mode Setup

Turn on indentation and auto-fill mode for Org files.

#+begin_src emacs-lisp :tangle yes

  (defun rsh/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    ;; (auto-fill-mode 0)
    (visual-line-mode 1))
    ;; (setq evil-auto-indent nil)
    ;; (diminish org-indent-mode))

#+end_src

** Org

Change the default ellipsis to reduce clutter in headers. And open Org files in a collapsed state, only showing the headers.

NOTE: subsequent sections are part of the same block.

#+begin_src emacs-lisp :tangle yes

  (use-package org
    :defer t
    :hook (org-mode . rsh/org-mode-setup)
    :config
    (setq org-ellipsis " v"
        org-hide-emphasis-markers t
        org-fontify-quote-and-verse-blocks t
        org-startup-folded 'content)

#+end_src

Load additional modes, such as ~org-habit~.

#+begin_src emacs-lisp :tangle yes

  (setq org-modules
        '(org-bookmark
          org-eshell
          org-habit))

#+end_src

Refile sections of Org files into another file or an archive.

#+begin_src emacs-lisp :tangle yes

  (setq org-refile-targets '((nil :maxlevel . 1)
                             org-agenda-files :maxlevel .1))
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t)

#+end_src

** Org Appear

Show inline Org mode syntax when the cursor is on an affected area.

#+begin_src emacs-lisp :tangle yes

  (use-package org-appear
    :hook (org-mode . org-appear-mode))

#+end_src

** Org Babel

With Org Babel, define and load languages to use within Org buffers.

#+begin_src emacs-lisp :tangle yes

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp .t)))

  (setq org-confirm-babel-evaluate nil)

#+end_src

** Agenda
*** File Paths

Keep track of Org files.

#+begin_src emacs-lisp :tangle yes

  (setq org-directory "~/Documents/Agenda")
  (setq org-agenda-files '("Archive.org"
                           "Birthdays.org"
                           "Body.org"
                           "Habits.org"
                           "Inbox.org"))

#+end_src

*** Workflow States

Trying out the simplified workflow states that David Wilson has within his configurations.

- =TODO= - A task to be done.
- =NEXT= - Task to be done following the completion of another.
- =BACK= - The task is put into a backlog for future completion.
- =WAIT= - Task that is on hold until someone/thing makes it actionable again.
- =DONE= - Task complete.

TODO: Create custom keyword faces with ~org-todo-keyword-faces~.

#+begin_src emacs-lisp :tangle yes

  (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "|" "WAIT(w)" "BACK(b)")))

  (add-hook 'org-timer-set-hook #'org-clock-in)

#+end_src

*** Tags

Custom common tags used to make creating/editing TODOs faster.

- =batch= - Batch task for completion with others.
- =followup= - Prioritise task as someone else depends on it.

#+begin_src emacs-lisp :tangle yes

  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@home" . ?H)
       ("@work" . ?W)
       ("batch" . ?b)
       ("followup" . ?f)))

#+end_src

*** Agendas

General settings for org-agenda and custom agenda views for listing items for the current week.

#+begin_src emacs-lisp :tangle yes

  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-span 'day)
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-columns-default-format "%20CATEGORY(Category) %65ITEM(Task) %TODO %6Effort(Estim){:} %6CLOCKSUM(Clock) %TAGS")

  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High Priority")))
            (tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Actions")
                   (org-agenda-max-todos nil)))
            (todo "TODO"
                  ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                   (org-agenda-files '("~/Documents/Agenda/Inbox.org"))
                   (org-agenda-text-search-extra-files nil)))))

          ("n" "Next Tasks"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))))

#+end_src

*** Capture Templates

Get ideas/progress into a note as fast as possible with little workflow disruption.

#+begin_src emacs-lisp :tangle yes

  (setq org-capture-templates
        '(("t" "Tasks")
          ("tt" "Task" entry (file "~/Documents/Agenda/Inbox.org")
           "* TODO  %?\nSCHEDULED: %t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))\n\n%i" :empty-lines 1)
          ("ts" "Clocked Entry Subtask" entry (clock)
           "* TODO  %?\n  %U\n\n  %i" :empty-lines 1)
          ("tm" "Mail" entry (file "~/Documents/Agenda/Inbox.org")
           "* TODO Mail: %a\nSCHEDULED: %t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))\n\n%:fromname %:date-timestamp\n\n%i" :empty-lines 1 :immediate-finish t)

          ("b" "Body")
          ("bw" "Body Weight" table-line (file+headline "~/Documents/Agenda/Body.org" "Body Weight")
           "| %U | %^{Weight kg} | %^{Notes} |" :kill-buffer t)))

#+end_src

** Roam

Basic installation and keybind setup to start building up my [[https://www.youtube.com/watch?v=Cv1RJTHf5fk][knowledge]] base.

#+begin_src emacs-lisp :tangle yes

  (use-package org-roam
    :init
    :custom
    (org-roam-directory "~/Documents/Roam")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)))
    (setq org-roam-node-display-template
          (concat "${title:*} "
                  (propertize "${tags:10}" 'face 'org-tag)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))

#+end_src

** Bullet Points

Improve the bullet point appearance of headings.

#+begin_src emacs-lisp :tangle yes

  (use-package org-superstar
    :after org
    :hook(org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Templates

With ~org-tempo~ quickly create templates for the listed langauges, with their corresponding shorthand.

#+begin_src emacs-lisp :tangle yes

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))

#+end_src

** Keybinds

Keeping it evil.

#+begin_src emacs-lisp :tangle yes

  (use-package evil-org
    :after org
    :hook ((org-mode . evil-org-mode)
           (org-agenda-mode . evil-org-mode)
           (evil-org-mode . (lambda ()
                              (evil-org-set-key-theme '(navigation
                                                        todo
                                                        insert
                                                        textobject
                                                        additional)))))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (rsh/leader-key-def
    "o" '(:ignore t :which-key "org mode")
    "oi" '(:ignore t :which-key "insert")
    "oil" '(org-insert-link :which-key "insert link")
    "oa" '(org-agenda :which-key "status")
    "ot" '(org-todo-list :which-key "todos")
    "oc" '(org-capture t :which-key "capture")
    "ox" '(org-export-dispatch t :which-key "export"))

#+end_src

** Close

Close the ~use-package org-mode~ block.

#+begin_src emacs-lisp :tangle yes
  )
#+end_src

* Mail

** Mu4e

NOTE: subsequent sections are part of the same block.

#+begin_src emacs-lisp :tangle yes

  (use-package mu4e
    :ensure nil
    :defer 20
    :config

    ;; Renames message when moved to avoid issues with mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Sync email with mbsync every 10 minutes
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-update-interval (* 10 60))

    ;; List folder paths for mailboxes
    (setq mu4e-maildir "~/.local/share/mail")

    ;; Kill message buffers
    (setq message-kill-buffer-on-exit t)

    ;; Do not prompt for confirmation when exiting
    (setq mu4e-confirm-quit nil)

#+end_src

** Contexts

Setup mu4e to use multiple email accounts with their own set of variables.

TODO: Improve the compose signature for both accounts.

#+begin_src emacs-lisp :tangle yes

  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "1-richard@xhalford.com"
             :match-func (lambda (msg)
                           (when msg
                             (string-prefix-p "/richard@xhalford.com" (mu4e-message-field msg :maildir))))
             :vars '((user-full-name . "Richard Halford")
                     (user-mail-address . "richard@xhalford.com")
                     (smtpmail-smtp-server . "mail.xhalford.com")
                     (smtpmail-smtp-service . 587)
                     (smtpmail-smtp-user . "richard")
                     (mu4e-compose-signature .
                      (concat
                       "Richard Halford"))
                     (mu4e-sent-folder . "/richard@xhalford.com/Sent")
                     (mu4e-trash-folder . "/richard@xhalford.com/Trash")
                     (mu4e-drafts-folder . "/richard@xhalford.com/Drafts")
                     (mu4e-maildir-shortcuts . (("/richard@xhalford.com/Inbox" . ?i)
                                                ("/richard@xhalford.com/Sent" . ?s)
                                                ("/richard@xhalford.com/Trash" . ?t)
                                                ("/richard@xhalford.com/Drafts" . ?d)))))
           ,(make-mu4e-context
             :name "2-richardh.1995@googlemail.com"
             :match-func (lambda (msg)
                           (when msg
                             (string-prefix-p "/richardh.1995@googlemail.com" (mu4e-message-field msg :maildir))))
             :vars '((user-full-name . "Richard Halford")
                     (user-mail-address . "richardh.1995@googlemail.com")
                     (smtpmail-smtp-server . "smtp.gmail.com")
                     (smtpmail-smtp-service . 587)
                     (smtpmail-smtp-user . "richardh.1995")
                     (mu4e-compose-signature .
                      (concat
                       "Richard Halford"))
                     (mu4e-sent-folder . "/richardh.1995@googlemail.com/Mail]/Sent")
                     (mu4e-trash-folder . "/richardh.1995@googlemail.com/[Google Mail]/Bin")
                     (mu4e-drafts-folder . "/richardh.1995@googlemail.com/Mail]/Drafts")
                     (mu4e-maildir-shortcuts . (("/richardh.1995@googlemail.com/Inbox" . ?i)
                                                ("/richardh.1995@googlemail.com/Mail]/Sent" . ?s)
                                                ("/richardh.1995@googlemail.com/[Google Mail]/Bin" . ?t)
                                                ("/richardh.1995@googlemail.com/Mail]/Drafts" . ?d)))))))

  ;; Set richard@xhalford.com to default context
  (setq mu4e-context-policy 'pick-first)

  ;; Soft-wrap emails to recipients client window
  (setq mu4e-compose-format-flowed t)

  ;; Use mu4e as the default SMTP mail client
  (setq mail-user-agent 'mu4e-user-agent
        message-send-mail-function 'smtpmail-send-it)

#+end_src

** Deletions

This function prevents mu4e from permanently deleting mail moved to the trash folder. This is done by modifying the trash mark definition from the default ~+T-N~ to just ~-N~. This code snippet is completely /killy-yanksted/ from [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/][Caches to Caches]]. 

#+begin_src emacs-lisp :tangle yes

  (defun remove-nth-element (nth list)
    (if (zerop nth) (cdr list)
      (let ((last (nthcdr (1- nth) list)))
        (setcdr last (cddr last))
        list)))
  (setq mu4e-marks (remove-nth-element 5 mu4e-marks))
  (add-to-list 'mu4e-marks
               '(trash
                 :char ("d" . "▼")
                 :prompt "dtrash"
                 :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
                 :action (lambda (docid msg target)
                           (mu4e~proc-move docid
                                           (mu4e~mark-check-target target) "-N"))))

#+end_src

** HTML

TODO: setup mail composition with Org syntax and convert a copy into HTML.

#+begin_src emacs-lisp :tangle no

  ;; Either implement org-mime, with seemingly better "outside of mu4e" workflow.
  (use-package org-mime
    :ensure t
    :config
    (setq org-mime-export-options '( :section-numbers nil
                                     :with-author nil
                                     :with-toc nil))
    (add-hook 'org-mime-html-hook
              (lambda ()
                (org-mime-change-element-style
                 "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                               "#EBDBB2" "#282828"))))
    (add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart))

  ;; Or use org-msg, which seems to have the better "inside of mu4e" integration.
  (use-package org-msg
    :config
    (setq org-msg-default-alternatives '((new . (text html))
                                         (reply-to-html . (text html))
                                         (reply-to-text . (text))))
    (org-msg-mode))

#+end_src

** Bookmarks

Add extra bookmarked queries to the start page.

TODO: work out how to remove items already listed by mu4e

#+begin_src emacs-lisp :tangle yes

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "Combined Inbox"
                :query "maildir:/richard@xhalford.com/Inbox OR maildir:/richardh.1995@googlemail.com/Inbox"
                :key ?c))

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "Flagged Mail"
                :query "flag:flagged"
                :key ?f))

#+end_src

** Queries

Create custom search and capture queries to be used within keybinds or notifications, etc.

#+begin_src emacs-lisp :tangle yes

  ;; Save current query as a link to be inserted in org-mode (C-c C-l)
  (defun rsh/store-link-to-mu4e-query ()
    (interactive)
    (let ((mu4e-org-link-query-in-headers-mode t))
      (call-interactively 'org-store-link)))

  ;; Create a query for a combined inbox of unread messages
  (setq rsh/mu4e-inbox-query
        "(maildir:/richard@xhalford.com/Inbox OR maildir:/richardh.1995@googlemail.com/Inbox) AND flag:unread")

  ;; Go to the combined inbox of unread messages
  (defun rsh/go-to-inbox ()
    (interactive)
    (mu4e-headers-search rsh/mu4e-inbox-query))

  ;; Capture a task with a link for the mail item
  (defun rsh/capture-mail-task (msg)
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "tm"))

  (add-to-list 'mu4e-headers-actions
               '("task" . rsh/capture-mail-task) t)
  (add-to-list 'mu4e-view-actions
               '("task" . rsh/capture-mail-task) t)

#+end_src

** Keybinds

Map usefule keybinds to issue common mu4e commands.

#+begin_src emacs-lisp :tangle yes

  (rsh/leader-key-def
    "m" '(:ignore t :which-key "mail")
    "mm" 'mu4e
    "mc" 'mu4e-compose-new
    "mi" 'rsh/go-to-inbox
    "my" '(:ignore t :which-key "copy")
    "myq" 'rsh/store-link-to-mu4e-query
    "ms" 'mu4e-headers-search
    "mS" 'mu4e-update-mail-and-index)

#+end_src

** Background Process

Synchronise email via mu4e running in the background of emacs.

#+begin_src emacs-lisp :tangle yes

  (mu4e t)

#+end_src

** Notifications

Show notifications for all new unread mail after a sync.

#+begin_src emacs-lisp :tangle yes

  (use-package mu4e-alert
    :after mu4e
    :config
    (setq mu4e-alert-interesting-mail-query rsh/mu4e-inbox-query)
    (setq mu4e-alert-notify-repeated-mails nil)
    (mu4e-alert-enable-notifications))

#+end_src

** Close

Close the ~use-package mu4e~ block.

#+begin_src emacs-lisp :tangle yes
  )
#+end_src

* Mode Margins

#+begin_src emacs-lisp :tangle yes

  (defun rsh/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . rsh/org-mode-visual-fill))

#+end_src

* Dashboard

TODO: figure out how to have dashboard just display agenda link descriptions and not the url too

#+begin_src emacs-lisp :tangle yes

  (use-package dashboard
    :init
    :config
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-banner-logo-title "Welcome to Emacs")
    (setq dashboard-startup-banner 'official)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-items '((projects . 5)
                          (bookmarks . 5)
                          (recents . 5)
                          (agenda . 5)))
    (setq dashboard-item-names '(("Agenda for the coming week:" . "Agenda:")))
    (setq dashboard-agenda-sort-strategy '(time-up))
    (setq dashboard-projects-backend 'project-el)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-navigator t)
    (setq dashboard-center-content t)
    (dashboard-setup-startup-hook))

#+end_src

* Runtime Performance

Reduce garbage collection threshold back down, so it happens more frequently.

#+begin_src emacs-lisp :tangle yes

  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
